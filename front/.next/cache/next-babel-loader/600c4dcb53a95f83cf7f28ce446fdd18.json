{"ast":null,"code":"import { takeLatest, put, call, all, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE } from \"../reducers/user/actions\";\n\nfunction loginAPI() {\n  return axios.get(\"\");\n}\n\nfunction* login() {\n  try {\n    const result = yield call(loginAPI);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: result\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOGIN_FAILURE,\n      data: error\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/kpmg/front/sagas/user.ts"],"names":["takeLatest","put","call","all","fork","axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","loginAPI","get","login","result","type","data","error","console","watchLogin","userSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,aAHF,QAIO,0BAJP;;AAMA,SAASC,QAAT,GAAoB;AAClB,SAAOJ,KAAK,CAACK,GAAN,CAAU,EAAV,CAAP;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMV,IAAI,CAACO,QAAD,CAAzB;AACA,UAAMR,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEN,aADE;AAERO,MAAAA,IAAI,EAAEF;AAFE,KAAD,CAAT;AAID,GAND,CAME,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMd,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEL,aADE;AAERM,MAAAA,IAAI,EAAEC;AAFE,KAAD,CAAT;AAID;AACF;;AAED,UAAUE,UAAV,GAAuB;AACrB,QAAMjB,UAAU,CAACM,aAAD,EAAgBK,KAAhB,CAAhB;AACD;;AAED,eAAe,UAAUO,QAAV,GAAqB;AAClC,QAAMf,GAAG,CAAC,CAACC,IAAI,CAACa,UAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, call, all, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  LOGIN_REQUEST,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE\n} from \"../reducers/user/actions\";\n\nfunction loginAPI() {\n  return axios.get(\"\");\n}\n\nfunction* login() {\n  try {\n    const result = yield call(loginAPI);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: result\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOGIN_FAILURE,\n      data: error\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}\n"]},"metadata":{},"sourceType":"module"}