{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { takeLatest, put, call, all, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE } from \"../reducers/user/actions\";\n\nfunction loginAPI() {\n  return axios.get(\"\");\n}\n\nfunction login() {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOGIN_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOGIN_FAILURE,\n            data: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOGIN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/gadamer1/Documents/webdev/kpmg/front/sagas/user.ts"],"names":["login","watchLogin","userSaga","takeLatest","put","call","all","fork","axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","loginAPI","get","result","type","data","console","error"],"mappings":";;;;yBAYUA,K;;;yBAgBAC,U;;;yBAIeC,Q;;AAhCzB,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,aAHF,QAIO,0BAJP;;AAMA,SAASC,QAAT,GAAoB;AAClB,SAAOJ,KAAK,CAACK,GAAN,CAAU,EAAV,CAAP;AACD;;AAED,SAAUb,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMK,IAAI,CAACO,QAAD,CAAV;;AAFnB;AAEUE,UAAAA,MAFV;AAAA;AAGI,iBAAMV,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEL,aADE;AAERM,YAAAA,IAAI,EAAEF;AAFE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIG,UAAAA,OAAO,CAACC,KAAR;AARJ;AASI,iBAAMd,GAAG,CAAC;AACRW,YAAAA,IAAI,EAAEJ,aADE;AAERK,YAAAA,IAAI;AAFI,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUf,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAME,UAAU,CAACM,aAAD,EAAgBT,KAAhB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMI,GAAG,CAAC,CAACC,IAAI,CAACN,UAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest, put, call, all, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  LOGIN_REQUEST,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE\n} from \"../reducers/user/actions\";\n\nfunction loginAPI() {\n  return axios.get(\"\");\n}\n\nfunction* login() {\n  try {\n    const result = yield call(loginAPI);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: result\n    });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: LOGIN_FAILURE,\n      data: error\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}\n"]},"metadata":{},"sourceType":"module"}